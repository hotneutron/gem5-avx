// Copyright (c) 2015 Mark D. Hill and David A. Wood
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Nilay Vaish

////////////////////////////////////////////////////////////////////
//
// Decode the opcodes with evex prefix.
//
    default: decode EVEX_MAP {
        0x01: decode OPCODE_OP_TOP5 {
            0x02: decode EVEX_P {
                0x0: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VMOVUPS(EVEX_LL, [Vps,Wps,Kv]);
                    0x1: EvexMultiInst::EVEX_VMOVUPS(EVEX_LL, [Wps,Vps,Kv]);
                    0x4: evex_vunpcklps_Vx_Hx_Wx_Kv();
                    0x5: evex_vunpckhps_Vx_Hx_Wx_Kv();
                    default: Inst::UD2();
                }

                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VMOVUPD(EVEX_LL, [Vpd,Wpd,Kv]);
                    0x1: EvexMultiInst::EVEX_VMOVUPD(EVEX_LL, [Wpd,Vpd,Kv]);
                    0x4: EvexMultiInst_EVEX_VUNPCKLPD_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VUNPCKHPD_Vx_Hx_Wx_Kv();
                    default: Inst::UD2();
                }

                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode MODRM_MOD {
                        0x03: EVEX_VMOVSS_Vx_Hx_Wss_Kv();
                        default: EVEX_VMOVSS_Vss_Md_Kv();
                    }
                    0x1: decode MODRM_MOD {
                        0x03: EVEX_VMOVSS_Wss_Hx_Vss_Kv();
                        default: EVEX_VMOVSS_Md_Vss_Kv();
                    }
                    0x2: EVexMultiInst_EVEX_VMOVSLDUP_Vx_Wx_Kv();
                    0x6: EvexMultiInst_VMOVSHDUP_Vx_Wx_Kv();
                    default: Inst::UD2();
                }

                0x3: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode MODRM_MOD {
                        0x03: EVEX_VMOVSD_Vx_Hx_Wsd_Kv();
                        default: EVEX_VMOVSD_Vsd_Mq_Kv();
                    }
                    0x1: decode MODRM_MOD {
                        0x03: EVEX_VMOVSD_Wsd_Hx_Vsd_Kv();
                        default: EVEX_VMOVSD_Mq_Vsd_Kv();
                    }
                    0x2: EvexMultiInst_EVEX_VMOVDDUP_Vq_Wq_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0A: decode EVEX_P {
                0x0: decode OPCODE_OP_BOTTOM3 {
                    0x1: EvexMultiInst_EVEX_VSQRTPS_Vps_Wps_Kv();
                    0x4: EvexMultiInst_EVEX_VANDPS_Vps_Hps_Wps_Kv();
                    0x5: EvexMultiInst_EVEX_VANDNPS_Vps_Hps_Wps_Kv();
                    0x6: EvexMultiInst_EVEX_VORPS_Vps_Hps_Wps_Kv();
                    0x7: EvexMultiInst_EVEX_VXORPS_Vps_Hps_Wps_Kv();
                    default: Inst::UD2();
                }
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x1: EvexMultiInst_EVEX_VSQRTPD_Vpd_Wpd_Kv();
                    0x4: EvexMultiInst_EVEX_VANDPD_Vpd_Hpd_Wpd_Kv();
                    0x5: EvexMultiInst_EVEX_VANDNPD_Vpd_Hpd_Wpd_Kv();
                    0x6: EvexMultiInst_EVEX_VORPD_Vpd_Hpd_Wpd_Kv();
                    0x7: EvexMultiInst_EVEX_VXORPD_Vpd_Hpd_Wpd_Kv();
                    default: Inst::UD2();
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x1: EVEX_VSQRTSS_Vss_Hss_Wss_Kv();
                    default: Inst::UD2();
                }
                0x3: decode OPCODE_OP_BOTTOM3 {
                    0x1: EVEX_VSQRTSD_Vsd_Hsd_Wsd_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0C: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPUNPCKLBW_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_EVEX_VPUNPCKLWD_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPUNPCKLDQ_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPACKSSWB_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPCMPGTB_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPCMPGTW_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst::EVEX_VPCMPGTD(EVEX_LL, [GKv,Hx,Wx,Kv]);
                    0x7: EvexMultiInst_EVEX_VPACKUSWB_Vx_Hx_Wx_Kv();
                }
                default: Inst::UD2();
            }

            0x0E: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPSHUFD_Vx_Wx_Ib_Kv();
                    0x1: decode MODRM_REG {
                        0x2: EvexMultiInst_EVEX_VPSRLW_Nq_Ib_Kv();
                        0x4: EvexMultiInst_EVEX_VPSRAW_Nq_Ib_Kv();
                        0x6: EvexMultiInst_EVEX_VPSLLW_Nq_Ib_Kv();
                        default: Inst::UD2();
                    }
                    0x2: decode MODRM_REG {
                        0x2: EvexMultiInst_EVEX_VPSRLD_Hx_Ux_Ib_Kv();
                        0x4: EvexMultiInst_EVEX_VPSRAD_Hx_Ux_Ib_Kv();
                        0x6: EvexMultiInst_EVEX_VPSLLD_Hx_Ux_Ib_Kv();
                        default: Inst::UD2();
                    }
                    0x3: decode MODRM_REG {
                        0x2: EvexMultiInst_EVEX_VPSRLQ_Hx_Ux_Ib_Kv();
                        0x6: EvexMultiInst_EVEX_VPSLLQ_Hx_Ux_Ib_Kv();
                        default: Inst::UD2();
                    }
                    0x4: EvexMultiInst_EVEX_VPCMPEQB_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPCMPEQW_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst::EVEX_VPCMPEQD(EVEX_LL, [GKv,Hx,Wx,Kv]);
                    default: Inst::UD2();
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPSHUFHW_Vx_Wx_Ib_Kv();
                    default: Inst::UD2();
                }
                0x3: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPSHUFLW_Vx_Wx_Ib_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x18: decode EVEX_P {
                0x0: decode OPCODE_OP_BOTTOM3 {
                    0x2: EvexMultiInst_EVEX_VCMPPS_Vps_Hps_Wps_Ib_Kv();
                    0x6: EvexMultiInst_EVEX_VSHUFPS_Vps_Hps_Wps_Ib_Kv();
                    default: Inst::UD2();
                }
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x2: EvexMultiInst::EVEX_VCMPPD(EVEX_LL, [GKv,Hpd,Wpd,Ib,Kv]);
                    0x6: EvexMultiInst_EVEX_VSHUFPD_Vpd_Hpd_Wpd_Ib_Kv();
                    default: Inst::UD2();
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x2: EVEX_VCMPSS_Vss_Hss_Wss_Ib_Kv();
                    default: Inst::UD2();
                }
                0x3: decode OPCODE_OP_BOTTOM3 {
                    0x2: EVEX_VCMPSD_Vsd_Hsd_Wsd_Ib_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x1A: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x1: EvexMultiInst_EVEX_VPSRLW_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPSRLD_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPSRLQ_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPADDQ_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPMULLW_Vx_Hx_Wx();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x1C: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPAVGB_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_EVEX_VPSRAW_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPSRAD_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPAVGW_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPMULHUW_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPMULHW_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst_EVEX_VCVTTPD2DQ_Vx_Wqq_Kv(); // should be modified
                    default: Inst::UD2();
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x6: EvexMultiInst_EVEX_VCVTDQ2PD_Vx_Wpd_Kv();
                    default: Inst::UD2();
                }
                0x3: decode OPCODE_OP_BOTTOM3 {
                    0x6: EvexMultiInst_EVEX_VCVTPD2DQ_Vx_Wpd_Kv();
                    // EVEX_LL:1   0x1: EVEX_VCVTPD2DQ_Vx_Wqq_Kv(); // should be modified.
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x1E: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x1: EvexMultiInst_EVEX_VPSLLW_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPSLLD_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPSLLQ_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPMULUDQ_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPMADDWD_Vx_Hx_Wx_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x05: decode EVEX_P {
                0x0: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VMOVAPS(EVEX_LL, [Vps,Wps,Kv]);
                    0x1: EvexMultiInst::EVEX_VMOVAPS(EVEX_LL, [Wps,Vps,Kv]);
                    default: Inst::UD2();
                }
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VMOVAPD(EVEX_LL, [Vpd,Wpd,Kv]);
                    0x1: EvexMultiInst::EVEX_VMOVAPD(EVEX_LL, [Wpd,Vpd,Kv]);
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0B: decode EVEX_P {
                0x0: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VADDPS(EVEX_LL, [Vps,Hps,Wps,Kv]);
                    0x1: EvexMultiInst::EVEX_VMULPS(EVEX_LL, [Vps,Hps,Wps,Kv]);
                    0x2: EvexMultiInst_EVEX_VCVTPS2PD_Vpd_Wps_Kv();
                    0x3: EvexMultiInst_EVEX_VCVTDQ2PS_Vps_Wdq_Kv();
                    0x4: EvexMultiInst::EVEX_VSUBPS(EVEX_LL, [Vps,Hps,Wps,Kv]);
                    0x5: EvexMultiInst::EVEX_VMINPS(EVEX_LL, [Vps,Hps,Wps,Kv]);
                    0x6: EvexMultiInst::EVEX_VDIVPS(EVEX_LL, [Vps,Hps,Wps,Kv]);
                    0x7: EvexMultiInst::EVEX_VMAXPS(EVEX_LL, [Vps,Hps,Wps,Kv]);
                }
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VADDPD(EVEX_LL, [Vpd,Hpd,Wpd,Kv]);
                    0x1: EvexMultiInst::EVEX_VMULPD(EVEX_LL, [Vpd,Hpd,Wpd,Kv]);
                    0x2: EvexMultiInst_EVEX_VCVTPD2PS_Vps_Wpd_Kv();
                    0x3: EvexMultiInst_EVEX_VCVTPS2DQ_Vx_Wps_Kv();
                    0x4: EvexMultiInst::EVEX_VSUBPD(EVEX_LL, [Vpd,Hpd,Wpd,Kv]);
                    0x5: EvexMultiInst::EVEX_VMINPD(EVEX_LL, [Vpd,Hpd,Wpd,Kv]);
                    0x6: EvexMultiInst::EVEX_VDIVPD(EVEX_LL, [Vpd,Hpd,Wpd,Kv]);
                    0x7: EvexMultiInst::EVEX_VMAXPD(EVEX_LL, [Vpd,Hpd,Wpd,Kv]);
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x0: EVEX_VADDSS_Vss_Hss_Wss_Kv();
                    0x1: EVEX_VMULSS_Vss_Hss_Wss_Kv();
                    0x2: EVEX_VCVTSS2SD_Vsd_Hx_Wss_Kv();
                    0x3: EvexMultiInst_EVEX_VCVTTPS2DQ_Vx_Wps_Kv();
                    0x4: EVEX_VSUBSS_Vss_Hss_Wss_Kv();
                    0x5: EVEX_VMINSS_Vss_Hss_Wss_Kv();
                    0x6: EVEX_VDIVSS_Vss_Hss_Wss_Kv();
                    0x7: EVEX_VMAXSS_Vss_Hss_Wss_Kv();
                }
                0x3: decode OPCODE_OP_BOTTOM3 {
                    0x0: EVEX_VADDSD_Vsd_Hsd_Wsd_Kv();
                    0x1: EVEX_VMULSD_Vsd_Hsd_Wsd_Kv();
                    0x2: EVEX_VCVTSD2SS_Vss_Hx_Wsd_Kv();
                    0x4: EVEX_VSUBSD_Vsd_Hsd_Wsd_Kv();
                    0x5: EVEX_VMINSD_Vsd_Hsd_Wsd_Kv();
                    0x6: EVEX_VDIVSD_Vsd_Hsd_Wsd_Kv();
                    0x7: EVEX_VMAXSD_Vsd_Hsd_Wsd_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0D: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPUNPCKHBW_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_EVEX_VPUNPCKHWD_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPUNPCKHDQ_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPACKSSDW_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPUNPCKLQDQ_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPUNPCKHQDQ_Vx_Hx_Wx_Kv();
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VMOVDQA32(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VMOVDQA64(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VMOVDQU32(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VMOVDQU64(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0F: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VMOVDQA32(EVEX_LL, [Wx,Vx,Kv]);
                        0x1: EvexMultiInst::EVEX_VMOVDQA64(EVEX_LL, [Wx,Vx,Kv]);
                    }
                    default: Inst::UD2();
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VMOVDQU32(EVEX_LL, [Wx,Vx,Kv]);
                        0x1: EvexMultiInst::EVEX_VMOVDQU64(EVEX_LL, [Wx,Vx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x1B: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPSUBUSB_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_EVEX_VPSUBUSW_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPMINUB_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPAND_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPADDUSB_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPADDUSW_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst_EVEX_VPMAXUB_Vx_Hx_Wx_Kv();
                    0x7: EvexMultiInst_EVEX_VPANDN_Vx_Hx_Wx_Kv();
                }
                default: Inst::UD2();
            }

            0x1D: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPSUBSB_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_EVEX_VPSUBSW_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_EVEX_VPMINSW_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_EVEX_VPOR_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_EVEX_VPADDSB_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPADDSW_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst_EVEX_VPMAXSW_Vx_Hx_Wx_Kv();
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPXORD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPXORQ(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                }
                default: Inst::UD2();
            }

            0x1F: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_EVEX_VPSUBB_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_EVEX_VPSUBW_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst::EVEX_VPSUBD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    0x3: EvexMultiInst::EVEX_VPSUBQ(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    0x4: EvexMultiInst_EVEX_VPADDB_Vx_Hx_Wx_Kv();
                    0x5: EvexMultiInst_EVEX_VPADDW_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst::EVEX_VPADDD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }
            default: Inst::UD2();
        }

        0x02: decode OPCODE_OP_TOP5 {
            0x00: decode EVEX_P {
                default: Inst::UD2();
            }

            0x02: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x3: EVEX_VCVTPH2PS_Vx_Wx_Ib_Kv();
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPERMPS(EVEX_LL,
                                     [], [Vx,Hx,Wx,Kv], [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPERMPD(EVEX_LL,
                                     [], [Vx,Hx,Wx,Kv], [Vx,Hx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x04: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EVEX_VPMOVSXBW();
                    0x1: EVEX_VPMOVSXBD();
                    0x2: EVEX_VPMOVSXBQ();
                    0x3: EVEX_VPMOVSXWD();
                    0x4: EVEX_VPMOVSXWQ();
                    0x5: EVEX_VPMOVSXDQ();
                    0x6: decode EVEX_W {
                        0x0: Inst::EVEX_VPTESTMB(GKv,Hpd,Wpd,Kv);
                        0x1: Inst::EVEX_VPTESTMW(GKv,Hpd,Wpd,Kv);
                    }
                    0x7: decode EVEX_W {
                        0x0: Inst::EVEX_VPTESTMD(GKv,Hpd,Wpd,Kv);
                        0x1: Inst::EVEX_VPTESTMQ(GKv,Hpd,Wpd,Kv);
                    }
                }
                0x2: decode OPCODE_OP_BOTTOM3 {
                    0x6: decode EVEX_W {
                        0x0: Inst::EVEX_VPTESTNMB(GKv,Hpd,Wpd,Kv);
                        0x1: Inst::EVEX_VPTESTNMW(GKv,Hpd,Wpd,Kv);
                    }
                    0x7: decode EVEX_W {
                        0x0: Inst::EVEX_VPTESTNMD(GKv,Hpd,Wpd,Kv);
                        0x1: Inst::EVEX_VPTESTNMQ(GKv,Hpd,Wpd,Kv);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x06: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x5: EvexMultiInst_EVEX_VPMOVZXDQ_Vx_Wx_Kv();
                    0x6: EvexMultiInst::EVEX_VPERMD(EVEX_LL,
                                  [], [Vx,Hx,Wx,Kv], [Vx,Hx,Wx,Kv]);
                    0x7: EvexMultiInst_EVEX_VPCMPGTQ_GKv_Hx_Wx();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x08: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VPMULLD(EVEX_LL, [Vx,Hx,Wx]);
                    0x1: EvexMultiInst_evex_vphminposuw_Vdq_Wdq_Kv();
                    0x5: EvexMultiInst_evex_vpsrlvd_Vx_Hx_Wx_Kv();
                    0x6: EvexMultiInst_evex_vpsravd_Vx_Hx_Wx_Kv();
                    0x7: EvexMultiInst_evex_vpsllvd_Vx_Hx_Wx_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0C: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x5: decode EVEX_W {
                        0x0: EvexMultiInst_EVEX_VBLENDMPS_Vx_Hx_Wx_Kv();
                        0x1: EvexMultiInst::EVEX_VBLENDMPD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x12: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPGATHERDD(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPGATHERDQ(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    0x1: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPGATHERQD(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPGATHERQQ(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    0x2: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VGATHERDPS(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VGATHERDPD(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    0x3: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VGATHERQPS(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VGATHERQPD(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMADDSUB132PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMADDSUB132PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMSUBADD132PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMSUBADD132PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x14: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPSCATTERDD(EVEX_LL, [Wx,Vx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPSCATTERDQ(EVEX_LL, [Wx,Vx,Kv]);
                    }
                    0x1: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPSCATTERQD(EVEX_LL, [Wx,Vx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPSCATTERQQ(EVEX_LL, [Wx,Vx,Kv]);
                    }
                    0x2: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VSCATTERDPS(EVEX_LL, [Wx,Vx,Kv]);
                        0x1: EvexMultiInst::EVEX_VSCATTERDPD(EVEX_LL, [Wx,Vx,Kv]);
                    }
                    0x3: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VSCATTERQPS(EVEX_LL, [Wx,Vx,Kv]);
                        0x1: EvexMultiInst::EVEX_VSCATTERQPD(EVEX_LL, [Wx,Vx,Kv]);
                    }
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMADDSUB213PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMADDSUB213PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMSUBADD213PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMSUBADD213PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x16: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMADDSUB231PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMADDSUB231PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x7: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMSUBADD231PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMSUBADD231PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x18: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x4: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPCONFLICTD(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPCONFLICTQ(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x01: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x3: vpmulhrsw_Vx_Hx_Wx_Kv();
                    0x4: vpermilps_Vx_Hx_Wx_Kv();
                    0x5: VPERMILPD_Vx_Hx_Wx_Kv();
                    0x6: vtestps_Vx_Wx_Kv();
                    0x7: vtestpd_Vx_Wx_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x03: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VBROADCASTSS(EVEX_LL, [Vx,Wdq,Kv]);
                    0x1: decode EVEX_W {
                        0x0: EVEX_VBROADCASTF32X2_Vpd_Wsd_Kv();
                        0x1: EvexMultiInst::EVEX_VBROADCASTSD(EVEX_LL,
                                               [], [Vpd,Wsd,Kv], [Vpd,Wsd,Kv]);
                    }
                    0x2: decode EVEX_W {
                        0x0: EvexMultiInst_EVEX_VBROADCASTF32X4_Vx_Mdq_Kv();
                        0x1: EvexMultiInst_EVEX_VBROADCASTF64X2_Vx_Mdq_Kv();
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x05: decode EVEX_P {
                default: Inst::UD2();
            }

            0x07: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst_evex_vpminsb_Vx_Hx_Wx_Kv();
                    0x1: EvexMultiInst_evex_vpminsd_Vx_Hx_Wx_Kv();
                    0x2: EvexMultiInst_evex_vpminuw_Vx_Hx_Wx_Kv();
                    0x3: EvexMultiInst_evex_vpminud_Vx_Hx_Wx_Kv();
                    0x4: EvexMultiInst_evex_vpmaxsb_Vx_Hx_Wx_Kv();
                    0x5: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPMAXSD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPMAXSQ(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x6: EvexMultiInst_evex_vpmaxuw_Vx_Hx_Wx_Kv();
                    0x7: EvexMultiInst_evex_vpmaxud_Vx_Hx_Wx_Kv();
                }
                default: Inst::UD2();
            }

            0x09: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x4: decode EVEX_W {
                        0x0: EvexMultiInst_EVEX_VRCP14PS_Vps_Wps_Kv();
                        0x1: EvexMultiInst_EVEX_VRCP14PD_Vpd_Wpd_Kv();
                    }
                    0x5: decode EVEX_W {
                        0x0: EVEX_VRCP14SS_Vps_Wps_Kv();
                        0x1: EVEX_VRCP14SD_Vpd_Wpd_Kv();
                    }
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst_EVEX_VRSQRT14PS_Vps_Wps_Kv();
                        0x1: EvexMultiInst_EVEX_VRSQRT14PD_Vpd_Wpd_Kv();
                    }
                    0x7: decode EVEX_W {
                        0x0: EVEX_VRSQRT14SS_Vps_Wps_Kv();
                        0x1: EVEX_VRSQRT14SD_Vpd_Wpd_Kv();
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0B: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: EvexMultiInst::EVEX_VPBROADCASTD(EVEX_LL, [Vx,Wdq,Kv]);
                    0x1: EvexMultiInst::EVEX_VPBROADCASTQ(EVEX_LL, [Vx,Wdq,Kv]);
                    0x2: EvexMultiInst_evex_vbroadcasti128_Vqq_Mdq_Kv();
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x0F: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x2: EvexMultiInst::EVEX_VPBROADCASTB(EVEX_LL, [Vx,Ev,Kv]);
                    0x3: EvexMultiInst::EVEX_VPBROADCASTW(EVEX_LL, [Vx,Ev,Kv]);
                    0x4: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPBROADCASTD(EVEX_LL, [Vx,Ev,Kv]);
                        0x1: EvexMultiInst::EVEX_VPBROADCASTQ(EVEX_LL, [Vx,Ev,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x11: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x3: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VPCOMPRESSD(EVEX_LL, [Vx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VPCOMPRESSQ(EVEX_LL, [Vx,Wx,Kv]);
                    }
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x13: decode EVEX_P {
                0x0: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMADD132PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMADD132PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x1: decode EVEX_W {
                        0x0: EVEX_VFMADD132SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFMADD132SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x2: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMSUB132PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMSUB132PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x3: decode EVEX_W {
                        0x0: EVEX_VFMSUB132SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFMSUB132SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x4: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFNMADD132PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFNMADD132PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x5: decode EVEX_W {
                        0x0: EVEX_VFNMADD132SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFNMADD132SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFNMSUB132PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFNMSUB132PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x7: decode EVEX_W {
                        0x0: EVEX_VFNMSUB132SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFNMSUB132SD_Vsd_Hsd_Wsd_Kv();
                    }
                }
                default: Inst::UD2();
            }

            0x15: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMADD213PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMADD213PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x1: decode EVEX_W {
                        0x0: EVEX_VFMADD213SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFMADD213SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x2: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMSUB213PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMSUB213PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x3: decode EVEX_W {
                        0x0: EVEX_VFMSUB213SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFMSUB213SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x4: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFNMADD213PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFNMADD213PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x5: decode EVEX_W {
                        0x0: EVEX_VFNMADD213SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFNMADD213SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFNMSUB213PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFNMSUB213PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x7: decode EVEX_W {
                        0x0: EVEX_VFNMSUB213SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFNMSUB213SD_Vsd_Hsd_Wsd_Kv();
                    }
                }
                default: Inst::UD2();
            }

            0x17: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    0x0: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMADD231PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMADD231PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x1: decode EVEX_W {
                        0x0: EVEX_VFMADD231SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFMADD231SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x2: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFMSUB231PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFMSUB231PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x3: decode EVEX_W {
                        0x0: EVEX_VFMSUB231SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFMSUB231SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x4: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFNMADD231PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFNMADD231PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x5: decode EVEX_W {
                        0x0: EVEX_VFNMADD231SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFNMADD231SD_Vsd_Hsd_Wsd_Kv();
                    }
                    0x6: decode EVEX_W {
                        0x0: EvexMultiInst::EVEX_VFNMSUB231PS(EVEX_LL, [Vx,Hx,Wx,Kv]);
                        0x1: EvexMultiInst::EVEX_VFNMSUB231PD(EVEX_LL, [Vx,Hx,Wx,Kv]);
                    }
                    0x7: decode EVEX_W {
                        0x0: EVEX_VFNMSUB231SS_Vss_Hss_Wss_Kv();
                        0x1: EVEX_VFNMSUB231SD_Vsd_Hsd_Wsd_Kv();
                    }
                }
                default: Inst::UD2();
            }

            0x1B: decode EVEX_P {
                default: Inst::UD2();
            }
            default: Inst::UD2();
        }

        0x03: decode OPCODE_OP_TOP5 {
            0x00: decode EVEX_P {
                default: Inst::UD2();
            }

            0x04: decode EVEX_P {
                default: Inst::UD2();
            }

            0x08: decode EVEX_P {
                default: Inst::UD2();
            }

            0x0C: decode EVEX_P {
                default: Inst::UD2();
            }

            0x01: decode EVEX_P {
                default: Inst::UD2();
            }

            0x03: decode EVEX_P {
                default: Inst::UD2();
            }

            0x05: decode EVEX_P {
                default: Inst::UD2();
            }

            0x09: decode EVEX_P {
                default: Inst::UD2();
            }

            0x0B: decode EVEX_P {
                default: Inst::UD2();
            }

            0x0D: decode EVEX_P {
                default: Inst::UD2();
            }

            0x0F: decode EVEX_P {
                0x1: decode OPCODE_OP_BOTTOM3 {
                    default: Inst::UD2();
                }
                default: Inst::UD2();
            }

            0x1B: decode EVEX_P {
                default: Inst::UD2();
            }
            default: Inst::UD2();
        }
        default: Inst::UD2();
    }
